// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
/*
 * Copyright (C) 2024, STMicroelectronics - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;

#include <dt-bindings/pinctrl/stm32-pinfunc.h>
#include "stm32mp257.dtsi"
#include "stm32mp25xf.dtsi"
#include "stm32mp257f-ev1-mx-resmem.dtsi"
#include "stm32mp25xxai-pinctrl.dtsi"

/* USER CODE BEGIN includes */
#include "stm32mp25-pinctrl.dtsi"
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/leds/common.h>
#include <dt-bindings/regulator/st,stm32mp25-regulator.h>
/* USER CODE END includes */

/ {
	model = "STMicroelectronics STM32MP257F-EV1 STM32CubeMX board - openstlinux-6.1-yocto-mickledore-mpu-v24.06.26";
	compatible = "st,stm32mp257f-ev1-mx", "st,stm32mp257f-ev1", "st,stm32mp257";

	memory@80000000 {
		device_type = "memory";
		reg = <0x0 0x80000000 0x00000001 0x00000000>;

		/* USER CODE BEGIN memory */
		/* USER CODE END memory */
	};

	/* USER CODE BEGIN root */

	aliases{
		ethernet0 = &eth2;
		ethernet1 = &eth1;
		serial0 = &usart2;
		serial1 = &usart6;
		serial2 = &lpuart1;
	};

	chosen{
		stdout-path = "serial0:115200n8";
		#address-cells = <2>;
		#size-cells = <2>;
		ranges;
		framebuffer {
			compatible = "simple-framebuffer";
			clocks = <&rcc CK_BUS_LTDC>, <&rcc CK_KER_LTDC>,
				 <&rcc CK_BUS_LVDS>, <&rcc CK_KER_LVDSPHY>;
			status = "disabled";
		};
	};

	clocks{

		cec_clock:cec-clock{
			compatible = "fixed-clock";
			#clock-cells = <0>;
			clock-frequency = <12000000>;
		};

		clk_ext_camera:clk-ext-camera{
			#clock-cells = <0>;
			compatible = "fixed-clock";
			clock-frequency = <24000000>;
		};

		pad_clk:pad-clk{
			#clock-cells = <0>;
			compatible = "fixed-clock";
			clock-frequency = <100000000>;
		};
	};

	gpio-keys{
		compatible = "gpio-keys";

		button-user-1{
			label = "User-1";
			linux,code = <BTN_1>;
			gpios = <&gpiod 2 GPIO_ACTIVE_HIGH>;
			status = "okay";
		};

		button-user-2{
			label = "User-2";
			linux,code = <BTN_2>;
			gpios = <&gpiog 8 GPIO_ACTIVE_HIGH>;
			status = "okay";
		};

		button-wake-up{
			label = "wake-up";
			linux,code = <KEY_WAKEUP>;
			interrupts-extended = <&optee 0>;
			status = "okay";
		};
	};

	gpio-leds{
		compatible = "gpio-leds";

		led-blue{
			function = LED_FUNCTION_HEARTBEAT;
			color = <LED_COLOR_ID_BLUE>;
			gpios = <&gpioj 7 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "heartbeat";
			default-state = "off";
		};
	};

	hdmi:connector{
		compatible = "hdmi-connector";
		label = "hdmi";
		type = "a";

		port{

			hdmi_connector_in:endpoint{
				remote-endpoint = <&adv753x_out>;
			};
		};
	};
	panel_lvds:panel-lvds{
		compatible = "edt,etml0700z9ndha", "panel-lvds";
		enable-gpios = <&gpiog 15 GPIO_ACTIVE_HIGH>;
		backlight = <&panel_lvds_backlight>;
		status = "okay";
		width-mm = <156>;
		height-mm = <92>;
		data-mapping = "vesa-24";

		panel-timing{
			clock-frequency = <54000000>;
			hactive = <1024>;
			vactive = <600>;
			hfront-porch = <150>;
			hback-porch = <150>;
			hsync-len = <21>;
			vfront-porch = <24>;
			vback-porch = <24>;
			vsync-len = <21>;
		};

		port{

			lvds_panel_in:endpoint{
				remote-endpoint = <&lvds_out0>;
			};
		};
	};

	panel_lvds_backlight:panel-lvds-backlight{
		compatible = "gpio-backlight";
		gpios = <&gpioi 5 GPIO_ACTIVE_HIGH>;
		default-on;
		default-brightness-level = <1>;
		status = "okay";
	};
	panel_lvds_fhd: panel-lvds-fhd {
		compatible = "edt,etml0700z8dha", "panel-lvds";
		enable-gpios = <&gpiog 15 GPIO_ACTIVE_HIGH>;
		backlight = <&panel_lvds_fhd_backlight>;
		status = "disabled";

		width-mm = <156>;
		height-mm = <88>;
		data-mapping = "vesa-24";

		panel-timing {
			clock-frequency = <148437500>;
			hactive = <1920>;
			vactive = <1080>;
			hsync-len = <20>;
			hfront-porch = <130>;
			hback-porch = <130>;
			vfront-porch = <5>;
			vback-porch = <20>;
			vsync-len = <20>;
		};

		port {
			lvds_panel_fhd_in: endpoint {
			};
		};
	};

	panel_lvds_fhd_backlight: panel-lvds-fhd-backlight {
		compatible = "gpio-backlight";
		gpios = <&gpioi 5 GPIO_ACTIVE_LOW>;
		default-on;
		default-brightness-level = <0>;
		status = "disabled";
	};

	sound: sound {
		compatible = "audio-graph-card";
		label = "STM32MP25-EV1";
		dais = <&i2s2_port>;
		status = "disabled";
	};
	/* USER CODE END root */

}; /*root*/

&pinctrl {

	eth1_mdio_pins_mx: eth1_mdio_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('F', 0, AF10)>; /* ETH1_MDC */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
			st,io-clk-edge = <0>;
			st,io-retime = <0>;
			st,io-delay-path = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('F', 2, AF10)>; /* ETH1_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
			st,io-clk-edge = <0>;
			st,io-retime = <0>;
			st,io-delay-path = <0>;
		};
	};

	eth1_mdio_sleep_pins_mx: eth1_mdio_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 0, ANALOG)>, /* ETH1_MDC */
					 <STM32_PINMUX('F', 2, ANALOG)>; /* ETH1_MDIO */
		};
	};

	eth1_rgmii_pins_mx: eth1_rgmii_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 11, AF10)>, /* ETH1_RGMII_RX_CTL */
					 <STM32_PINMUX('C', 2, AF10)>, /* ETH1_RGMII_RXD1 */
					 <STM32_PINMUX('F', 1, AF10)>, /* ETH1_RGMII_RXD0 */
					 <STM32_PINMUX('H', 12, AF10)>, /* ETH1_RGMII_RXD2 */
					 <STM32_PINMUX('H', 13, AF10)>; /* ETH1_RGMII_RXD3 */
			bias-disable;
			drive-push-pull;
			st,io-clk-edge = <1>;
			st,io-retime = <1>;
			st,io-delay-path = <0>;
			st,io-delay = <0x0b0000>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 13, AF10)>, /* ETH1_RGMII_TX_CTL */
					 <STM32_PINMUX('A', 15, AF10)>, /* ETH1_RGMII_TXD0 */
					 <STM32_PINMUX('C', 1, AF10)>, /* ETH1_RGMII_TXD1 */
					 <STM32_PINMUX('H', 10, AF10)>, /* ETH1_RGMII_TXD2 */
					 <STM32_PINMUX('H', 11, AF10)>; /* ETH1_RGMII_TXD3 */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
			st,io-clk-edge = <1>;
			st,io-retime = <1>;
			st,io-delay-path = <0>;
			st,io-delay = <0x0b0000>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('A', 14, AF10)>; /* ETH1_RGMII_RX_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
			st,io-clk-edge = <0>;
			st,io-retime = <0>;
			st,io-delay-path = <0>;
		};
		pins4 {
			pinmux = <STM32_PINMUX('C', 0, AF12)>; /* ETH1_RGMII_GTX_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
			st,io-clk-edge = <0>;
			st,io-retime = <0>;
			st,io-delay-path = <0>;
			st,io-delay = <0x0b0000>;
		};
		pins5 {
			pinmux = <STM32_PINMUX('H', 9, AF10)>; /* ETH1_RGMII_CLK125 */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
	};

	eth1_rgmii_sleep_pins_mx: eth1_rgmii_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 11, ANALOG)>, /* ETH1_RGMII_RX_CTL */
					 <STM32_PINMUX('A', 13, ANALOG)>, /* ETH1_RGMII_TX_CTL */
					 <STM32_PINMUX('A', 14, ANALOG)>, /* ETH1_RGMII_RX_CLK */
					 <STM32_PINMUX('A', 15, ANALOG)>, /* ETH1_RGMII_TXD0 */
					 <STM32_PINMUX('C', 0, ANALOG)>, /* ETH1_RGMII_GTX_CLK */
					 <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_RGMII_TXD1 */
					 <STM32_PINMUX('C', 2, ANALOG)>, /* ETH1_RGMII_RXD1 */
					 <STM32_PINMUX('F', 1, ANALOG)>, /* ETH1_RGMII_RXD0 */
					 <STM32_PINMUX('H', 9, ANALOG)>, /* ETH1_RGMII_CLK125 */
					 <STM32_PINMUX('H', 10, ANALOG)>, /* ETH1_RGMII_TXD2 */
					 <STM32_PINMUX('H', 11, ANALOG)>, /* ETH1_RGMII_TXD3 */
					 <STM32_PINMUX('H', 12, ANALOG)>, /* ETH1_RGMII_RXD2 */
					 <STM32_PINMUX('H', 13, ANALOG)>; /* ETH1_RGMII_RXD3 */
		};
	};

	eth2_mdio_pins_mx: eth2_mdio_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 5, AF10)>; /* ETH2_MDIO */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
			st,io-clk-edge = <0>;
			st,io-retime = <0>;
			st,io-delay-path = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 6, AF10)>; /* ETH2_MDC */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
			st,io-clk-edge = <0>;
			st,io-retime = <0>;
			st,io-delay-path = <0>;
		};
	};

	eth2_mdio_sleep_pins_mx: eth2_mdio_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 5, ANALOG)>, /* ETH2_MDIO */
					 <STM32_PINMUX('C', 6, ANALOG)>; /* ETH2_MDC */
		};
	};

	eth2_rgmii_pins_mx: eth2_rgmii_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 4, AF10)>, /* ETH2_RGMII_TX_CTL */
					 <STM32_PINMUX('C', 7, AF10)>, /* ETH2_RGMII_TXD0 */
					 <STM32_PINMUX('C', 8, AF10)>, /* ETH2_RGMII_TXD1 */
					 <STM32_PINMUX('C', 9, AF10)>, /* ETH2_RGMII_TXD2 */
					 <STM32_PINMUX('C', 10, AF10)>; /* ETH2_RGMII_TXD3 */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
			st,io-clk-edge = <1>;
			st,io-retime = <1>;
			st,io-delay-path = <0>;
			st,io-delay = <0x0b0000>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 3, AF10)>, /* ETH2_RGMII_RX_CTL */
					 <STM32_PINMUX('C', 11, AF10)>, /* ETH2_RGMII_RXD3 */
					 <STM32_PINMUX('C', 12, AF10)>, /* ETH2_RGMII_RXD1 */
					 <STM32_PINMUX('F', 9, AF10)>, /* ETH2_RGMII_RXD2 */
					 <STM32_PINMUX('G', 0, AF10)>; /* ETH2_RGMII_RXD0 */
			bias-disable;
			drive-push-pull;
			st,io-clk-edge = <1>;
			st,io-retime = <1>;
			st,io-delay-path = <0>;
			st,io-delay = <0x0b0000>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('F', 6, AF10)>; /* ETH2_RGMII_RX_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
			st,io-clk-edge = <0>;
			st,io-retime = <0>;
			st,io-delay-path = <0>;
		};
		pins4 {
			pinmux = <STM32_PINMUX('F', 7, AF10)>; /* ETH2_RGMII_GTX_CLK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
			st,io-clk-edge = <0>;
			st,io-retime = <0>;
			st,io-delay-path = <0>;
			st,io-delay = <0x0b0000>;
		};
		pins5 {
			pinmux = <STM32_PINMUX('F', 8, AF10)>; /* ETH2_RGMII_CLK125 */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
	};

	eth2_rgmii_sleep_pins_mx: eth2_rgmii_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 3, ANALOG)>, /* ETH2_RGMII_RX_CTL */
					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH2_RGMII_TX_CTL */
					 <STM32_PINMUX('C', 7, ANALOG)>, /* ETH2_RGMII_TXD0 */
					 <STM32_PINMUX('C', 8, ANALOG)>, /* ETH2_RGMII_TXD1 */
					 <STM32_PINMUX('C', 9, ANALOG)>, /* ETH2_RGMII_TXD2 */
					 <STM32_PINMUX('C', 10, ANALOG)>, /* ETH2_RGMII_TXD3 */
					 <STM32_PINMUX('C', 11, ANALOG)>, /* ETH2_RGMII_RXD3 */
					 <STM32_PINMUX('C', 12, ANALOG)>, /* ETH2_RGMII_RXD1 */
					 <STM32_PINMUX('F', 6, ANALOG)>, /* ETH2_RGMII_RX_CLK */
					 <STM32_PINMUX('F', 7, ANALOG)>, /* ETH2_RGMII_GTX_CLK */
					 <STM32_PINMUX('F', 8, ANALOG)>, /* ETH2_RGMII_CLK125 */
					 <STM32_PINMUX('F', 9, ANALOG)>, /* ETH2_RGMII_RXD2 */
					 <STM32_PINMUX('G', 0, ANALOG)>; /* ETH2_RGMII_RXD0 */
		};
	};

	fdcan1_pins_mx: fdcan1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('G', 11, AF7)>; /* FDCAN1_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 12, AF7)>; /* FDCAN1_RX */
			bias-disable;
			drive-push-pull;
		};
	};

	fdcan1_sleep_pins_mx: fdcan1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('G', 11, ANALOG)>, /* FDCAN1_TX */
					 <STM32_PINMUX('G', 12, ANALOG)>; /* FDCAN1_RX */
		};
	};

	fdcan3_pins_mx: fdcan3_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('I', 12, AF7)>; /* FDCAN3_RX */
			bias-disable;
			drive-push-pull;
		};
		pins2 {
			pinmux = <STM32_PINMUX('J', 14, AF7)>; /* FDCAN3_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	fdcan3_sleep_pins_mx: fdcan3_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 12, ANALOG)>, /* FDCAN3_RX */
					 <STM32_PINMUX('J', 14, ANALOG)>; /* FDCAN3_TX */
		};
	};

	i2c2_pins_mx: i2c2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 4, AF9)>, /* I2C2_SDA */
					 <STM32_PINMUX('B', 5, AF9)>; /* I2C2_SCL */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c2_sleep_pins_mx: i2c2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 4, ANALOG)>, /* I2C2_SDA */
					 <STM32_PINMUX('B', 5, ANALOG)>; /* I2C2_SCL */
		};
	};

	pcie_pins_mx: pcie_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('J', 0, AF4)>; /* PCIE_CLKREQN */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	pcie_init_pins_mx: pcie_init_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('J', 0, ANALOG)>; /* PCIE_CLKREQN */
		};
	};

	sdmmc1_pins_mx: sdmmc1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 0, AF10)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('E', 1, AF10)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('E', 2, AF10)>, /* SDMMC1_CMD */
					 <STM32_PINMUX('E', 4, AF10)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('E', 5, AF10)>; /* SDMMC1_D1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc1_opendrain_pins_mx: sdmmc1_opendrain_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 0, AF10)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('E', 1, AF10)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('E', 4, AF10)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('E', 5, AF10)>; /* SDMMC1_D1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 2, AF10)>; /* SDMMC1_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('E', 3, AF10)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 0, ANALOG)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('E', 1, ANALOG)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('E', 2, ANALOG)>, /* SDMMC1_CMD */
					 <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC1_CK */
					 <STM32_PINMUX('E', 4, ANALOG)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('E', 5, ANALOG)>; /* SDMMC1_D1 */
		};
	};

	sdmmc2_pins_mx: sdmmc2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 6, AF12)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('E', 7, AF12)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 8, AF12)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('E', 9, AF12)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('E', 10, AF12)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('E', 11, AF12)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('E', 12, AF12)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('E', 13, AF12)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('E', 15, AF12)>; /* SDMMC2_CMD */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 14, AF12)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
	};

	sdmmc2_opendrain_pins_mx: sdmmc2_opendrain_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 6, AF12)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('E', 7, AF12)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 8, AF12)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('E', 9, AF12)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('E', 10, AF12)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('E', 11, AF12)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('E', 12, AF12)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('E', 13, AF12)>; /* SDMMC2_D0 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('E', 14, AF12)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <3>;
		};
		pins3 {
			pinmux = <STM32_PINMUX('E', 15, AF12)>; /* SDMMC2_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('E', 6, ANALOG)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('E', 7, ANALOG)>, /* SDMMC2_D7 */
					 <STM32_PINMUX('E', 8, ANALOG)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('E', 9, ANALOG)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('E', 10, ANALOG)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('E', 11, ANALOG)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('E', 12, ANALOG)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('E', 13, ANALOG)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('E', 14, ANALOG)>, /* SDMMC2_CK */
					 <STM32_PINMUX('E', 15, ANALOG)>; /* SDMMC2_CMD */
		};
	};

	usart2_pins_mx: usart2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 4, AF6)>; /* USART2_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 8, AF8)>; /* USART2_RX */
			bias-disable;
			drive-push-pull;
		};
	};

	usart2_idle_pins_mx: usart2_idle_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 4, ANALOG)>; /* USART2_TX */
		};
		pins2 {
			pinmux = <STM32_PINMUX('A', 8, AF8)>; /* USART2_RX */
			bias-disable;
			drive-push-pull;
		};
	};

	usart2_sleep_pins_mx: usart2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 4, ANALOG)>, /* USART2_TX */
					 <STM32_PINMUX('A', 8, ANALOG)>; /* USART2_RX */
		};
	};

	/* USER CODE BEGIN pinctrl */
	/* USER CODE END pinctrl */
};

&pinctrl_z {
	/* USER CODE BEGIN pinctrl_z */
	/* USER CODE END pinctrl_z */
};

&combophy{
	status = "okay";

	/* USER CODE BEGIN combophy */
	clocks = <&rcc CK_BUS_USB3PCIEPHY>, <&rcc CK_KER_USB3PCIEPHY>, <&pad_clk>;
	clock-names = "apb-clk", "ker-clk", "pad-clk";
	st,rx_equalizer = <1>;
	/* USER CODE END combophy */
};

&cryp1{
	status = "okay";

	/* USER CODE BEGIN cryp1 */
	/* USER CODE END cryp1 */
};

&csi2host{
	status = "okay";

	/* USER CODE BEGIN csi2host */
	vdd-supply = <&scmi_vddcore>;
	vdda18-supply = <&scmi_v1v8>;

 
	ports{
		#address-cells = <1>;
		#size-cells = <0>;
 
		port@0{
			reg = <0>;
 
			csi2host_sink:endpoint{
				remote-endpoint = <&imx335_ep>;
				data-lanes = <0 1>;
				bus-type = <4>;
			};
		};
 
		port@1{
			reg = <1>;
 
			csi2host_source:endpoint{
				remote-endpoint = <&dcmipp_0>;
			};
		};
	};
	/* USER CODE END csi2host */
};

&dcmipp{
	status = "okay";

	/* USER CODE BEGIN dcmipp */
	port{

		dcmipp_0:endpoint{
			remote-endpoint = <&csi2host_source>;
			bus-type = <4>;
		};
	};
	/* USER CODE END dcmipp */
};

&eth1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth1_mdio_pins_mx>, <&eth1_rgmii_pins_mx>;
	pinctrl-1 = <&eth1_mdio_sleep_pins_mx>, <&eth1_rgmii_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN eth1 */
	phy-mode = "rgmii-id";
	max-speed = <1000>;
	phy-handle = <&phy1_eth1>;
	st,eth-clk-sel;
	snps,ext-systime;

	mdio1{
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		phy1_eth1:ethernet-phy@4{
			compatible = "ethernet-phy-id001c.c916";
			reset-gpios = <&gpioj 9 GPIO_ACTIVE_LOW>;
			reset-assert-us = <10000>;
			reset-deassert-us = <80000>;
			realtek,eee-disable;
			reg = <4>;
		};
	};
	/* USER CODE END eth1 */
};

&eth2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth2_mdio_pins_mx>, <&eth2_rgmii_pins_mx>;
	pinctrl-1 = <&eth2_mdio_sleep_pins_mx>, <&eth2_rgmii_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN eth2 */
	phy-mode = "rgmii-id";
	max-speed = <1000>;
	phy-handle = <&phy1_eth2>;
	st,eth-ptp-from-rcc;

	mdio1{
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		phy1_eth2:ethernet-phy@1{
			compatible = "ethernet-phy-id001c.c916";
			reset-gpios = <&gpiog 6 GPIO_ACTIVE_LOW>;
			reset-assert-us = <10000>;
			reset-deassert-us = <80000>;
			realtek,eee-disable;
			reg = <1>;
		};
	};
	/* USER CODE END eth2 */
};

&gpu{
	status = "okay";

	/* USER CODE BEGIN gpu */
	contiguous-area = <&gpu_reserved>;
	/* USER CODE END gpu */
};

&hpdma{
	status = "okay";

	/* USER CODE BEGIN hpdma */
	memory-region = <&hpdma1_lli>;
	/* USER CODE END hpdma */
};

&hpdma2{
	status = "okay";

	/* USER CODE BEGIN hpdma2 */
	memory-region = <&hpdma2_lli>;
	/* USER CODE END hpdma2 */
};

&hpdma3{
	status = "okay";

	/* USER CODE BEGIN hpdma3 */
	memory-region = <&hpdma3_lli>;
	/* USER CODE END hpdma3 */
};

&i2c2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c2_pins_mx>;
	pinctrl-1 = <&i2c2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c2 */
	i2c-scl-rising-time-ns = <100>;
	i2c-scl-falling-time-ns = <13>;
	clock-frequency = <400000>;
	/delete-property/ dmas;
	/delete-property/ dma-names;

	imx335:imx335@1a{
		compatible = "sony,imx335";
		reg = <0x1a>;
		clocks = <&clk_ext_camera>;
		reset-gpios = <&gpioi 7 (GPIO_ACTIVE_HIGH | GPIO_PUSH_PULL)>;
		powerdown-gpios = <&gpioi 0 (GPIO_ACTIVE_HIGH | GPIO_PUSH_PULL)>;
		status = "okay";

		port{

			imx335_ep:endpoint{
				remote-endpoint = <&csi2host_sink>;
				clock-lanes = <0>;
				data-lanes = <1 2>;
				link-frequencies = /bits/ 64 <594000000>;
			};
		};
	};
	adv753x: hdmi@3d {
		/*
		 * With MB1232 board, use "adi,adv7533" (1080p30)
		 * With MB1752 board, use "adi,adv7535" (1080p60)
		 */
		compatible = "adi,adv7533";
		reg = <0x3d>, <0x3c>, <0x3f>, <0x38>;
		reg-names = "main", "cec", "edid", "packet";
		clocks = <&cec_clock>;
		clock-names = "cec";
		interrupt-parent = <&gpiod>;
		interrupts = <10 IRQ_TYPE_EDGE_FALLING>;
		status = "disabled";
		adi,dsi-lanes = <4>;
		reset-gpios = <&gpiog 14 GPIO_ACTIVE_LOW>;
		avdd-supply = <&scmi_v1v8>;
		dvdd-supply = <&scmi_v1v8>;
		pvdd-supply = <&scmi_v1v8>;
		a2vdd-supply = <&scmi_v1v8>;
		v3p3-supply = <&scmi_v3v3>;
		v1p2-supply = <&scmi_v1v8>;

		ports {
			#address-cells = <1>;
			#size-cells = <0>;

			port@0 {
				reg = <0>;
				adv753x_in: endpoint {
					remote-endpoint = <&dsi_out1>;
				};
			};

			port@1 {
				reg = <1>;
				adv753x_out: endpoint {
					remote-endpoint = <&hdmi_connector_in>;
				};
			};

			port@2 {
				reg = <2>;
				adv753x_tx_endpoint: endpoint {
					remote-endpoint = <&i2s2_endpoint>;
				};
			};
		};
	};
	ili2511:ili2511@41{
		compatible = "ilitek,ili251x";
		reg = <0x41>;
		interrupt-parent = <&gpioi>;
		interrupts = <13 IRQ_TYPE_EDGE_FALLING>;
		reset-gpios = <&gpiog 14 GPIO_ACTIVE_LOW>;
		status = "okay";
	};
	/* USER CODE END i2c2 */
};

&ltdc{
	status = "okay";

	/* USER CODE BEGIN ltdc */
	default-on;
	rotation-memory = <&ltdc_sec_rotation>;

	port{
		#address-cells = <1>;
		#size-cells = <0>;

		ltdc_ep0_out:endpoint@0{
			reg = <0>;
			remote-endpoint = <&dsi_in>;
		};

		ltdc_ep1_out:endpoint@1{
			reg = <1>;
			remote-endpoint = <&lvds_in>;
		};
	};
	/* USER CODE END ltdc */
};

&lvds{
	status = "okay";

	/* USER CODE BEGIN lvds */
	default-on;
	vdd-supply = <&scmi_vddcore>;
	vdda18-supply = <&scmi_v1v8>;

	ports{
		#address-cells = <1>;
		#size-cells = <0>;

		port@0{
			reg = <0>;

			lvds_in:endpoint{
				remote-endpoint = <&ltdc_ep1_out>;
			};
		};

		port@1{
			reg = <1>;

			lvds_out0:endpoint{
				remote-endpoint = <&lvds_panel_in>;
			};
		};
	};
	/* USER CODE END lvds */
};

&m_can1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan1_pins_mx>;
	pinctrl-1 = <&fdcan1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m_can1 */
	/* USER CODE END m_can1 */
};

&m_can3{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&fdcan3_pins_mx>;
	pinctrl-1 = <&fdcan3_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN m_can3 */
	/* USER CODE END m_can3 */
};

&m33_rproc{
	status = "okay";

	/* USER CODE BEGIN m33_rproc */
	compatible = "st,stm32mp2-m33-tee";
	mboxes = <&ipcc1 0x100>, <&ipcc1 0x101>, <&ipcc1 2>;
	mbox-names = "vq0", "vq1", "shutdown";
	memory-region = <&ipc_shmem_1>, <&vdev0vring0>,
			<&vdev0vring1>, <&vdev0buffer>,
			<&cm33_sram2>;
	/* USER CODE END m33_rproc */
};

&pcie_rc{
	pinctrl-names = "default", "init";
	pinctrl-0 = <&pcie_pins_mx>;
	pinctrl-1 = <&pcie_init_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN pcie_rc */
	reset-gpios = <&gpioj 8 GPIO_ACTIVE_LOW>;
	wakeup-source;
	wake-gpios = <&gpioh 5 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
	/* USER CODE END pcie_rc */
};

&sdmmc1{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_pins_mx>;
	pinctrl-1 = <&sdmmc1_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc1 */
	cd-gpios = <&gpiod 9 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
	disable-wp;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&scmi_vdd_sdcard>;
	vqmmc-supply = <&scmi_vddio1>;
	sd-uhs-sdr12;
	sd-uhs-sdr25;
	sd-uhs-sdr50;
	sd-uhs-ddr50;
	sd-uhs-sdr104;
	/* USER CODE END sdmmc1 */
};

&sdmmc2{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_pins_mx>;
	pinctrl-1 = <&sdmmc2_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc2 */
	non-removable;
	no-sd;
	no-sdio;
	st,neg-edge;
	bus-width = <8>;
	vmmc-supply = <&scmi_vdd_emmc>;
	vqmmc-supply = <&scmi_vddio2>;
	mmc-ddr-1_8v;
	mmc-hs200-1_8v;
	/* USER CODE END sdmmc2 */
};

&usart2{
	pinctrl-names = "default", "idle", "sleep";
	pinctrl-0 = <&usart2_pins_mx>;
	pinctrl-1 = <&usart2_idle_pins_mx>;
	pinctrl-2 = <&usart2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN usart2 */
	/delete-property/ dmas;
	/delete-property/ dma-names;
	/* USER CODE END usart2 */
};

&usb2_phy1{
	status = "okay";

	/* USER CODE BEGIN usb2_phy1 */
	/* USER CODE END usb2_phy1 */
};

&usb2_phy2{
	status = "okay";

	/* USER CODE BEGIN usb2_phy2 */
	vdd33-supply = <&scmi_vdd3v3_usb>;
	/* USER CODE END usb2_phy2 */
};

&usb3dr{
	status = "okay";

	/* USER CODE BEGIN usb3dr */

	dwc3:usb@48300000{
		maximum-speed = "high-speed";
		usb-role-switch;

		port{

			dwc3_ep:endpoint{
				remote-endpoint = <&typec_ep>;
			};
		};
	};
	/* USER CODE END usb3dr */
};

&usbh{
	status = "okay";

	/* USER CODE BEGIN usbh */
	usbh_ehci:usb@482f0000{
		#address-cells = <1>;
		#size-cells = <0>;

		hub@1{
			compatible = "usb424,2514";
			reg = <1>;
			vdd-supply = <&scmi_v3v3>;
		};
	};
	/* USER CODE END usbh */
};

&vdec{
	status = "okay";

	/* USER CODE BEGIN vdec */
	/* USER CODE END vdec */
};

&venc{
	status = "okay";

	/* USER CODE BEGIN venc */
	/* USER CODE END venc */
};

/* USER CODE BEGIN addons */

&a35ss_syscfg{
	status = "okay";
};

&arm_wdt{
	timeout-sec = <32>;
	status = "okay";
};

&cs_cpu_debug0{
	status = "okay";
};

&cs_cpu_debug1{
	status = "okay";
};

&cs_cti0{
	status = "okay";
};

&cs_cti1{
	status = "okay";
};

&cs_cti_cpu0{
	status = "okay";
};

&cs_cti_cpu1{
	status = "okay";
};

&cs_etf{
	status = "okay";
};

&cs_etm0{
	status = "okay";
};

&cs_etm1{
	status = "okay";
};

&cs_etr{
	status = "okay";
};

&cs_funnel{
	status = "okay";
};

&cs_replicator{
	status = "okay";
};

&cs_stm{
	status = "okay";
};

&cs_tpiu{
	status = "okay";
};

&dsi{
	status = "disabled";
	vdd-supply = <&scmi_vddcore>;
	vdda18-supply = <&scmi_v1v8>;

	ports{
		#address-cells = <1>;
		#size-cells = <0>;

		port@0{
			reg = <0>;

			dsi_in:endpoint{
				remote-endpoint = <&ltdc_ep0_out>;
			};
		};

		port@1{
			reg = <1>;

			dsi_out1:endpoint{
				remote-endpoint = <&adv753x_in>;
			};
		};
	};
};


&i2s2 {
	status = "disabled";

	i2s2_port: port {
		i2s2_endpoint: endpoint {
			remote-endpoint = <&adv753x_tx_endpoint>;
			format = "i2s";
			mclk-fs = <256>;
		};
	};
};
&mlahb{

	intc_rpmsg:interrupt-controller@1{
		compatible = "rpmsg,intc";
		reg = <1 0>;
		#interrupt-cells = <1>;
		interrupt-controller;
	};

	i2c_rpmsg:i2c@2{
		compatible = "rpmsg,i2c-controller";
		reg = <2 0>;
		rpmsg,dev-id = "rpmsg_i2c";
		#address-cells = <1>;
		#size-cells = <0>;
		status = "okay";

		typec@35{
			compatible = "st,stm32mp25-typec";
			reg = <0x35>;
			interrupts-extended = <&intc_rpmsg 0>;
			status = "okay";

			connector{
				compatible = "usb-c-connector";
				label = "USB-C";

				port{

					typec_ep:endpoint{
						remote-endpoint = <&dwc3_ep>;
					};
				};
			};
		};
	};
};

&scmi_regu{

	scmi_vddio1:regulator@0{
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <3300000>;
	};

	scmi_vddcore:regulator@11{
		reg = <VOLTD_SCMI_STPMIC2_BUCK2>;
		regulator-name = "vddcore";
	};

	scmi_v1v8:regulator@14{
		reg = <VOLTD_SCMI_STPMIC2_BUCK5>;
		regulator-name = "v1v8";
	};

	scmi_v3v3:regulator@16{
		reg = <VOLTD_SCMI_STPMIC2_BUCK7>;
		regulator-name = "v3v3";
	};

	scmi_vdd_emmc:regulator@18{
		reg = <VOLTD_SCMI_STPMIC2_LDO2>;
		regulator-name = "vdd_emmc";
	};

	scmi_vdd3v3_usb:regulator@20{
		reg = <VOLTD_SCMI_STPMIC2_LDO4>;
		regulator-name = "vdd3v3_usb";
	};

	scmi_vdd_sdcard:regulator@23{
		reg = <VOLTD_SCMI_STPMIC2_LDO7>;
		regulator-name = "vdd_sdcard";
	};
};

&usb2_phy1{
	vdd33-supply = <&scmi_vdd3v3_usb>;
	status = "okay";
};


&usart2_pins_mx{
	u-boot,dm-pre-reloc;

	pins1{
		u-boot,dm-pre-reloc;
	};

	pins2{
		u-boot,dm-pre-reloc;
	};
};



&usart2_pins_mx{
	u-boot,dm-pre-reloc;

	pins1{
		u-boot,dm-pre-reloc;
	};

	pins2{
		u-boot,dm-pre-reloc;
	};
};

/* USER CODE END addons */

